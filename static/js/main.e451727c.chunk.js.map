{"version":3,"sources":["utils/utils.js","components/Answer.js","components/HorizontalLine.js","components/Questions.js","utils/generators.js","QuestionsContext.js","pages/StartPage.js","pages/QuizPage.js","App.js","index.js"],"names":["decodeEntity","inputStr","textarea","document","createElement","innerHTML","value","Answer","props","_React$useState","React","useState","state","_React$useState2","Object","slicedToArray","setState","useEffect","unselectedState","backgroundColor","border","styles","isSelected","fontWeight","color","react_default","a","className","style","onClick","toggle","generateAnswerElements","HorizontalLine","borderTop","concat","thickness","width","marginTop","distance","marginBottom","Question","_useContext","useContext","QuestionsContext","questions","toggleSelectedAnswer","_useState","_useState2","allAnswerElements","setAllAnswerElements","map","question","id","allAnswers","o","key","isCorrect","generateAnswers","answer","nanoid","createContext","QuestionsProvider","_ref","_contextValues","children","setQuestions","_useState3","_useState4","score","setScore","checkAnswer","checkAllAnswersSelected","newQuestionsArr","forEach","newAnswersArr","ans","prev","push","objectSpread","alert","every","find","contextValues","generateQuestions","fetch","then","res","json","data","results","entry","answers","array","i","length","j","Math","floor","random","temp","shuffleArray","correct_answer","toConsumableArray","incorrect_answers","printQuestions","console","log","questionId","answerId","newQuestions","currQuestion","currQuestionAllAnswers","currAnswer","defineProperty","Provider","StartPage","startQuiz","QuizPage","gameOver","setGameOver","questionElements","setQuestionElements","App","quizStarted","setQuizStarted","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e451727c.chunk.js","sourcesContent":["import { nanoid } from \"nanoid\";\r\n\r\nfunction shuffleArray(array) {\r\n  for (var i = array.length - 1; i > 0; i--) {\r\n    var j = Math.floor(Math.random() * (i + 1));\r\n    var temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction decodeEntity(inputStr) {\r\n  var textarea = document.createElement(\"textarea\");\r\n  textarea.innerHTML = inputStr;\r\n  return textarea.value;\r\n}\r\n\r\n\r\n\r\nexport { decodeEntity, shuffleArray };\r\n","import React, { useEffect } from \"react\";\r\nimport QuestionsContext from \"../QuestionsContext\";\r\n\r\nexport default function Answer(props) {\r\n  const [state, setState] = React.useState(props.state);\r\n\r\n  useEffect(() => {\r\n    setState(props.state);\r\n  }, [props.state]);\r\n\r\n  const unselectedState = {\r\n    backgroundColor: \"transparent\",\r\n    border: \"0.794239px solid #293264\",\r\n  };\r\n  const selectedState = {\r\n    backgroundColor: \"#D6DBF5\",\r\n    border: \"none\",\r\n  };\r\n  const passiveState = {\r\n    color: \"#969FCD\",\r\n    backgroundColor: \"transparent\",\r\n    border: \"0.771045px solid #969FCD\",\r\n  };\r\n  const wrongPassiveState = {\r\n    color: \"#969FCD\",\r\n    backgroundColor: \"#F8BCBC\",\r\n    border: \"none\",\r\n  };\r\n  const correctState = {\r\n    fontWeight: 500,\r\n    backgroundColor: \"#94D7A2\",\r\n    border: \"none\",\r\n  };\r\n  let styles = unselectedState;\r\n\r\n  if (state === \"init\") {\r\n    if (props.isSelected) {\r\n      styles = selectedState;\r\n    } else {\r\n      styles = unselectedState;\r\n    }\r\n  } else if (state === \"correct\") {\r\n    styles = correctState;\r\n  } else if (state === \"incorrect\") {\r\n    styles = wrongPassiveState;\r\n  } else if (state === \"passive\") {\r\n    styles = passiveState;\r\n  }\r\n\r\n  const handleClick = () => {\r\n    props.toggle();\r\n    props.generateAnswerElements();\r\n  };\r\n\r\n  return (\r\n    <div className=\"answer\" style={styles} onClick={handleClick}>\r\n      <p>{props.value}</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function HorizontalLine(props) {\r\n  const styles = {\r\n    borderTop: `${props.thickness} solid ${props.color}`,\r\n    width: \"100%\",\r\n    marginTop: props.distance,\r\n    marginBottom: props.distance,\r\n  };\r\n  return <div style={styles}></div>;\r\n}\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\n\r\nimport Answer from \"./Answer\";\r\nimport HorizontalLine from \"./HorizontalLine\";\r\n\r\nimport QuestionsContext from \"../QuestionsContext\";\r\n\r\nexport default function Question(props) {\r\n  const { questions, toggleSelectedAnswer } = useContext(QuestionsContext);\r\n  const [allAnswerElements, setAllAnswerElements] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setAllAnswerElements(generateAnswerElements);\r\n  }, [questions]);\r\n\r\n  const generateAnswerElements = () => {\r\n    return questions.map((question) => {\r\n      if (question.id === props.id) {\r\n        return question.allAnswers.map((o) => {\r\n          return (\r\n            <Answer\r\n              id={o.id}\r\n              key={o.id}\r\n              value={o.value}\r\n              isCorrect={o.isCorrect}\r\n              isSelected={o.isSelected}\r\n              state={o.state}\r\n              toggle={() => toggleSelectedAnswer(props.id, o.id)}\r\n              generateAnswerElements={generateAnswerElements}\r\n            />\r\n          );\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  // generateAnswerElements();\r\n\r\n  return (\r\n    <div className=\"question\">\r\n      <h3>{props.question}</h3>\r\n      <div className=\"answer-container\">{allAnswerElements}</div>\r\n      <HorizontalLine thickness=\"1px\" color=\"#DBDEF0\" distance=\"20px\" />\r\n    </div>\r\n  );\r\n}\r\n","import { nanoid } from \"nanoid\";\r\nimport { decodeEntity } from \"./utils\";\r\n\r\nimport React, { useContext } from \"react\";\r\nimport QuestionsContext from \"../QuestionsContext\";\r\n\r\nimport Question from \"../components/Questions\";\r\nimport Answer from \"../components/Answer\";\r\n\r\nfunction generateAnswers(answer, isCorrect) {\r\n  return {\r\n    id: nanoid(),\r\n    value: decodeEntity(answer),\r\n    isCorrect: isCorrect,\r\n    isSelected: false,\r\n    state: \"init\",\r\n  };\r\n}\r\n\r\nexport { generateAnswers };\r\n","import React, { createContext, useState } from \"react\";\r\nimport { shuffleArray, decodeEntity } from \"./utils/utils\";\r\nimport { generateAnswers } from \"./utils/generators\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nconst QuestionsContext = createContext();\r\n\r\nexport function QuestionsProvider({ children }) {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const setGameScore = (type) => {\r\n    if (type === \"increment\") {\r\n      setScore((prev) => prev + 1);\r\n    } else if (type === \"reset\") {\r\n      setScore(0);\r\n    }\r\n  };\r\n\r\n  const printQuestions = () => {\r\n    console.log(questions);\r\n  };\r\n\r\n  const generateQuestions = () => {\r\n    fetch(\r\n      \"https://opentdb.com/api.php?amount=5&category=9&difficulty=easy&type=multiple\"\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setQuestions(\r\n          data.results.map((entry) => {\r\n            const answers = shuffleArray([\r\n              generateAnswers(entry.correct_answer, true),\r\n              ...entry.incorrect_answers.map((o) => generateAnswers(o, false)),\r\n            ]);\r\n\r\n            return {\r\n              id: nanoid(),\r\n              question: decodeEntity(entry.question),\r\n              allAnswers: answers,\r\n            };\r\n          })\r\n        );\r\n      });\r\n  };\r\n\r\n  const checkAnswer = () => {\r\n    if (!checkAllAnswersSelected()) {\r\n      alert(\"You must answer all questions!\");\r\n      return;\r\n    }\r\n\r\n    // Checking the answers\r\n    let newQuestionsArr = [];\r\n    questions.forEach((question) => {\r\n      let newAnswersArr = [];\r\n      question.allAnswers.forEach((ans) => {\r\n        if (ans.isSelected && ans.isCorrect) {\r\n          setScore((prev) => (prev += 1));\r\n          newAnswersArr.push({\r\n            ...ans,\r\n            state: \"correct\",\r\n          });\r\n        } else if (ans.isSelected && !ans.isCorrect) {\r\n          newAnswersArr.push({\r\n            ...ans,\r\n            state: \"incorrect\",\r\n          });\r\n        } else if (!ans.isSelected && ans.isCorrect) {\r\n          newAnswersArr.push({\r\n            ...ans,\r\n            state: \"correct\",\r\n          });\r\n        } else {\r\n          newAnswersArr.push({\r\n            ...ans,\r\n            state: \"passive\",\r\n          });\r\n        }\r\n      });\r\n      newQuestionsArr.push({\r\n        ...question,\r\n        allAnswers: newAnswersArr,\r\n      });\r\n    });\r\n    setQuestions(newQuestionsArr);\r\n  };\r\n\r\n  const checkAllAnswersSelected = () => {\r\n    const allAreSelected = questions.every((question) =>\r\n      question.allAnswers.find((answer) => answer.isSelected)\r\n    );\r\n    return allAreSelected ? true : false;\r\n  };\r\n\r\n  const toggleSelectedAnswer = (questionId, answerId) => {\r\n    let newQuestions = [];\r\n    questions.forEach((question) => {\r\n      if (question.id === questionId) {\r\n        // Create a copy of the current question object\r\n        let currQuestion;\r\n        let currQuestionAllAnswers = [];\r\n        question.allAnswers.forEach((answer) => {\r\n          let currAnswer = answer;\r\n          if (answer.id === answerId) {\r\n            currQuestionAllAnswers.push({\r\n              ...currAnswer,\r\n              isSelected: !currAnswer.isSelected,\r\n            });\r\n          } else {\r\n            currQuestionAllAnswers.push(currAnswer);\r\n          }\r\n        });\r\n        currQuestionAllAnswers.forEach((answer) => {\r\n          if (answer.id !== answerId) {\r\n            answer.isSelected = false;\r\n          }\r\n        });\r\n        currQuestion = {\r\n          ...question,\r\n          allAnswers: currQuestionAllAnswers,\r\n        };\r\n        newQuestions.push(currQuestion);\r\n      } else {\r\n        newQuestions.push(question);\r\n      }\r\n    });\r\n    setQuestions(newQuestions);\r\n  };\r\n\r\n  const contextValues = {\r\n    questions,\r\n    score,\r\n    generateQuestions,\r\n    printQuestions,\r\n    checkAnswer,\r\n    toggleSelectedAnswer,\r\n    checkAnswer,\r\n    setScore,\r\n  };\r\n\r\n  return (\r\n    <QuestionsContext.Provider value={contextValues}>\r\n      {children}\r\n    </QuestionsContext.Provider>\r\n  );\r\n}\r\n\r\nexport default QuestionsContext;\r\n","import QuestionsContext from \"../QuestionsContext\";\r\nimport React, { useContext } from \"react\";\r\n\r\nexport default function StartPage(props) {\r\n  const { questions, generateQuestions } = useContext(QuestionsContext);\r\n\r\n  function startQuiz() {\r\n    props.startQuiz();\r\n    generateQuestions();\r\n  }\r\n  return (\r\n    <div className=\"start-page\">\r\n      <h1>Quizzical</h1>\r\n      <p>An online, multiple choice trivia app! Powered by React.</p>\r\n      <button onClick={startQuiz}>Start quiz</button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\n\r\nimport QuestionsContext from \"../QuestionsContext\";\r\n\r\nimport Question from \"../components/Questions\";\r\n\r\nexport default function QuizPage() {\r\n  const { questions, checkAnswer, score, setScore, generateQuestions } =\r\n    useContext(QuestionsContext);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [questionElements, setQuestionElements] = useState([]);\r\n\r\n  const generateQuestionElements = () => {\r\n    return questions.map((question) => {\r\n      return (\r\n        <Question\r\n          key={question.id}\r\n          id={question.id}\r\n          question={question.question}\r\n          allAnswers={question.allAnswers}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setQuestionElements(generateQuestionElements());\r\n  }, [questions]);\r\n\r\n  const restartGame = () => {\r\n    setScore(0);\r\n    setGameOver(false);\r\n    generateQuestions();\r\n  };\r\n\r\n  const displayResult = () => {\r\n    setGameOver(true);\r\n  };\r\n\r\n  const handleCheckAnswer = () => {\r\n    checkAnswer();\r\n    displayResult();\r\n  };\r\n\r\n  return (\r\n    <div className=\"quiz-page\">\r\n      <div className=\"questions-container\">{questionElements}</div>\r\n      {!gameOver && (\r\n        <button className=\"check-answer\" onClick={handleCheckAnswer}>\r\n          Check answers\r\n        </button>\r\n      )}\r\n\r\n      {gameOver && (\r\n        <div className=\"gameover\">\r\n          <h3>You scored {score}/5 correct answers!</h3>\r\n          <button className=\"check-answer\" onClick={restartGame}>\r\n            Play again\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.css\";\n\nimport StartPage from \"./pages/StartPage\";\nimport QuizPage from \"./pages/QuizPage\";\n\nimport React, { useState } from \"react\";\n\nimport { QuestionsProvider } from \"./QuestionsContext\";\n\nexport default function App() {\n  const [quizStarted, setQuizStarted] = useState(false);\n  function startQuiz() {\n    setQuizStarted(true);\n  }\n  return (\n    <QuestionsProvider>\n      <main>\n        {!quizStarted && <StartPage startQuiz={startQuiz} />}\n        {quizStarted && <QuizPage />}\n      </main>\n    </QuestionsProvider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}